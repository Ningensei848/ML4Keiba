
# nginx {{{
NGINX_IMAGE_TAG="alpine"
SERVER_NAME=macker.el
PORT_NGINX=80
PORT_NGINX_SSL=443
# }}}

# certbot {{{
CERTBOT_IMAGE_TAG="v1.20.0"
CERTBOT_VOLUME_PATH=/home/kiai/nginx/letsencrypt
USER_EMAIL=k.kubokawa@klis.tsukuba.ac.jp
CERTBOT_RENEW_COMMAND="renew --webroot -w /var/www/html/ssl-proof"
# }}}

# virtuoso {{{
PASSWORD_VIRTUOSO=password
PORT_VIRTUOSO=8890
VIRTUOSO_IMAGE_TAG="7.2-alpine"
# /database はコンテナが停止しても virtuoso 本体のデータを残すためのディレクトリ
# /mount/data は virtuoso コンテナでのマウント先ディレクトリ（ここにTTLデータを置く）
Parameters_DirsAllowed="., ../vad, /usr/share/proj, /database, /mount/data"
Parameters_QueryLog="/database/virtuoso.qrl"
# 1GB => (80000, 60000)
# 8GB => (680000, 500000)
# cf. http://vos.openlinksw.com/owiki/wiki/VOS/VirtRDFPerformanceTuning
Parameters_NumberOfBuffers=150000
Parameters_MaxDirtyBuffers=110000
# }}}

# GCE {{{
USERNAME="yourname"
GCE_PROJECT_NAME="prj_namae"
GCE_INSTANCE_NAME="instance-namae"
GCE_ZONE="us-west-x"
GCE_MACHINE_TYPE="e2-small"
GCE_TAGS="http-server,https-server"
GCE_COS_VERSION="cos-93-16623-39-6"
GCE_IMAGE_NAME="projects/cos-cloud/global/images/$GCE_COS_VERSION"
GCE_DISK_TYPE="projects/$GCE_PROJECT_NAME/zones/$GCE_ZONE/diskTypes/pd-balanced"
GCE_DISK_SIZE=15
GCE_CREATE_DISK="auto-delete=yes,boot=yes,device-name=$GCE_INSTANCE_NAME,image=$GCE_IMAGE_NAME,mode=rw,size=$GCE_DISK_SIZE,type=$GCE_DISK_TYPE"
GCE_STATIC_IP_ADDRESS=114.514.364.364

# gcloud compute instances create $GCE_CREATE_ARGS
GCE_CREATE_ARGS="$GCE_INSTANCE_NAME \
 --project $GCE_PROJECT_NAME \
 --zone $GCE_ZONE \
 --machine-type $GCE_MACHINE_TYPE \
 --tags $GCE_TAGS \
 --create-disk $GCE_CREATE_DISK \
 --metadata-from-file user-data=$PWD/gcp/cloud-config.yml,NGINX_CONFIG=$PWD/nginx/default.conf.template,DOTENV=$PWD/.env,COMPOSE_FILE=$PWD/docker-compose.yml,startup-script=$PWD/gcp/startup.sh \
 --metadata google-logging-enabled=true,cos-metrics-enabled=true,USERNAME=$USERNAME \
 --address $GCE_STATIC_IP_ADDRESS \
 --shielded-secure-boot \
 --shielded-vtpm \
 --shielded-integrity-monitoring"

GCE_STARTUP_LOG="/home/$USERNAME/startup.log"
GCE_SDK_TAG="361.0.0-alpine"
GCE_COMPOSE_TAG="1.29.2"

# 「gcloud への ssh 接続によるコマンド実行」そのものを nohup してバックグラウンドへ送る
# １．）gcloud で実行したいコマンドを $LOAD_COMMAND として定義
# ２．）startup-script から $LOAD_COMMAND を読み込んで，ファイル($LOAD_SCRIPT)として出力
# ３．）サーバが立ち上がったら，リモートから `nohup gcloud compute ssh instance_name --command "/home/$USERNAME/$LOAD_SCRIPT" &` を実行
LOAD_SCRIPT="load_turtle.sh"
LOAD_COMMAND='source /home/$USERNAME/.env && docker exec -i backend isql 1111 -U dba -P $PASSWORD_VIRTUOSO < /home/$USERNAME/$FILEPATH_TO_SQL'

# `gsutil` でファイルを読み込みたいときは以下のコマンド
GSUTIL_COMMAND="gsutil -m rsync -r gs://babieca/turtle /home/$USERNAME/data/turtle"
# GSUTIL_COMMAND="gsutil --help"
FILEPATH_TO_SQL=data/turtle/initialLoader.sql
# }}}

# LINE Notify {{{
TOKEN_LINE=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# }}}
